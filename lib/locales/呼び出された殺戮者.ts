/**
 * Created by user on 2017/12/21/021.
 */

import { sp, IWords, vMaybe } from '.';
import * as StrUtil from 'str-util';

/**
 * 改成小說名字
 */
export const lang = '呼び出された殺戮者';

/**
 * 其他用途
 *
 * @type {{chapter_id: string; chapter_title: string; volume_id: string; volume_title: string}}
 */
export const value = {
	chapter_id: '第{{0}}話',
	chapter_title: `$t(chapter_id, [{{0}}])　{{title}}`,

	volume_id: '第{{0}}章',
	volume_title: `$t(chapter_id, [{{0}}])：{{title}}`,
};

/**
 * 在這裡放此小說專屬的取代樣本
 */
export const words: IWords[] = [

	['远野', '遠野'],

	['澳莉嘉|奥莉佳|[奥澳][利莉][佳嘉加]|奥莉加', '奥莉佳'],
	['卡夏|卡莎|卡萨|卡沙', '卡莎'],

	//细剑骑士

	/**
	 * 依梅娜利亚（イメラリア第一公主）
	 * 阿比罗斯（アイペロス）王太子
	 */
	['伊梅娜丽亚|依梅娜利亚|依梅拉丽雅|imeraria', '依梅娜利亚'],
	['娜丽亚|娜利亚|拉丽雅', '娜利亚'],
	['公主|王女', '王女'],

	/**
	 * @todo 骑士
	 *
	 * 帕乔（パジョー　Pajou）
	 * 苏提菲鲁斯（スティフェルス）
	 */
	//
	['迈达斯|米达斯|米斯达|米達斯', '米达斯'],
	['帕鸠|帕乔', '帕乔'],

	//哥德斯拉斯
	//莎布纳古


	//ラグライン（拉久拉Raghlain）侯爵
	//卡西漠拉尔・姆依德・拉久拉　（カーシモラル・ヴァド・ラグライン）
	//奥巴施（オロバス）
	//斯久拉斯（ストラス）
	['拉古来因|拉久拉', '拉古来因'],
	['斯托莱斯|斯久拉斯', '斯托莱斯'],

	//哈根提子爵


	//维琪……贝罗为拉（ヴィシーVichyベイレヴラBeirevura）
	['贝雷维拉|贝罗为拉', '贝雷维拉'],

	//古扎凡
	//达姆斯

	//阿丽莎

	//布尔乌（ブエル）

	/**
	 * @todo 贫民窟
	 *
	 * 托鲁凯马达（トルケマダ）
	 * 彼弗隆（ビフロン）
	 */
	['托鲁克马达|托鲁凯马达', '托鲁凯马达'],


	/**
	 * @todo 文官奴隶
	 *
	 * 缪迦蕾
	 凯姆和布鲁库拉（ブロクラ）负责税收及预算
	 户籍制作与管理是帕莉优（パリュ）
	 工商业相关部门的指导则由多拉格（ドゥエルガル）
	 */

	/**
	 * @todo 公会/行会
	 *
	 * 贵族街的【布鲁顿】餐厅
	 */
	//赫拉（ヘラ）

	//矮人多伦
	//普鲁夫拉苏

	['铁四指|寸铁', '寸铁'],
	['(水色)?蓝宝石|水宝石', '水色蓝宝石'],

	/**
	 * @todo 国
	 *
	 * 奥斯库兰德（オーソングランデ）
	 * 霍根（ホーラント）王国
	 * 维希（ヴィシー）商业联邦维西
	 *
	 * 佛卡洛尔|佛卡荣如 フォカロル
	 */

	['奥梭格兰地|奥斯库兰德|奥克索兰蒂|奥索格兰蒂', '奥克索兰蒂'],
	['维西|维希|维多', '维希'],
	['霍兰特|霍根', '霍兰特'],

	['佛卡洛尔|佛卡荣如|佛卡罗鲁|佛卡罗尔', '佛卡洛尔'],
	//阿罗塞尔

	//隐匿之蛇
	['隐藏的蛇|隐匿之蛇|隠し蛇', '隐匿之蛇'],

	['行会|公会|协会', '公会'],

	[/([^\w])(\d+(?:[~]\d+)?)(?![\w])/g, function (...m)
	{
		return m[1] + StrUtil.toFullNumber(m[2]);
	}],

	[/[\!\(\):,~]/g, function (...m)
	{
		return StrUtil.toFullWidth(m[0], {
			skip: {
				space: true,
			},
		});
	}],

	[/^[ \t　]+/gm, ''],

	[/^([^\n"“”「」'\[\]［］]*)["“'\[［]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ『』\u4E00-\u9FFF][^\n"“”「」'\[\]［］]*(?:\n[^\n"“”「」'\[\]［］]*)?)["”'\]］]/gm, '$1「$2」'],
	[/^([^\n"“”『』'‘’]*)["“'‘]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n"“”『』'‘’]*)["”'’]/gm, '$1『$2』'],
	[/^([^\n【】<>]*)[<]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n【】<>]*)[>]/gm, '$1【$2】'],

	[/(『[^『』\n]+』[^\n"“”『』'‘’]*)["“'‘]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n"“”『』'‘’]*)["”'’]/gm, '$1『$2』'],
	[/(「[^「」\n]+」[^\n"“”「」'‘’]*)["“'‘]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n"“”「」'‘’]*)["”'’]/gm, '$1「$2」'],

	[/^([^「」\n【】\[\]［］\{\}]*)[\[［\{]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n【】\[\]］\{\}]*)[\]］\}]/gm, '$1【$2】'],
	[/(「[^「」\n【】\[\]［］]*)[\[［]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n【】\[\]］]*)[\]］]/gm, '$1【$2】'],


	[/(【[^【】\n<>\[\]\{\}]+】[^\n【】<>\[\]\{\}]*)[<\[\{]([ ]*[…？－—\w０-９ａ-ｚＡ-Ｚ\u4E00-\u9FFF][^\n【】<>\[\]\{\}]*)[\]\}>]/gm, '$1【$2】'],

	[/[\[【“]/g, '「'],
	[/[\]】”]/g, '」'],

	[/(「[^」]*)「([^」]*)」/g, '$1『$2』'],

	[/([^】\n])(\n【[^\n]+】\n)/g, '$1\n$2'],
	[/(\n【[^\n]+】\n)([^【\n])/g, '$1\n$2'],

	[/\n[ 　]*\.[ 　]*(?=\n)/g, '\n'],

	[/\n+[\-~]+\n*$/g, ''],

	[/^[\-]{3,}$/gm, '\n'],

] as IWords[];

/**
 * 需要人工確認的屏蔽字或錯字用語等等
 */
export const words_maybe: vMaybe = [

	//'需要偵測的字',

	'组合',

] as vMaybe;

/**
 * 分析取代完成後執行的代碼
 *
 * @param {string} text
 * @returns {string}
 */
export function words_callback(text: string): string
{
	return text;
}

export default exports;
